#!/usr/bin/env node

const fs = require('fs/promises')
const path = require('path')
const _ = require('lodash')
const translate = require('@vitalets/google-translate-api')

const cache = {}

/**
 * Populate memory cache with cached files
 */
const loadCache = async lang => {
  try {
    cache[lang] = {}
    const data = await fs.readFile(path.join(__dirname, `.cache/${lang}.txt`), 'utf-8')
    const lines = data.split('\n')

    lines.forEach(line => {
      const [origin, translation] = line.split('|')
      if (origin) {
        cache[lang][origin] = translation
      }
    })
  } catch {}
}

/**
 * Cache translation into file
 */
const cacheTranslation = async (key, value, lang) => {
  const line = `${key}|${value}\n`
  cache[lang][key] = value
  await fs.appendFile(path.join(__dirname, `.cache/${lang}.txt`), line)
  return value
}

/**
 * Safely read a json file
 */
const safeRead = async filePath => {
  try {
    const data = await fs.readFile(path.resolve(filePath), 'utf-8')
    return JSON.parse(data)
  } catch {
    return null
  }
}

/**
 * Iterate through object (possibly) nested properties and translate them
 */
const iterLeaves = (value, lang, keyChain = [], acc = {}) => {
  if (_.isObject(value)) {
    return _.chain(value)
      .reduce((handlers, v, k) => handlers.concat(iterLeaves(v, lang, keyChain.concat(k), acc)), [])
      .flattenDeep()
      .value()
  }

  if (typeof value !== 'string') return value

  return () => {
    if (cache[lang] && cache[lang][value]) {
      _.set(acc, keyChain, cache[lang][value])
      return acc
    }

    console.log(`Translating "${value}" to ${lang}.`)

    return translate(value, { to: lang })
      .then(res => cacheTranslation(value, res.text, lang))
      .catch(err => console.log('An error occured:', err))
      .then(text => {
        _.set(acc, keyChain, text)
        return acc
      })
  }
}

const recurseOmit = (value, iteratee) => {
  const cb = v => recurseOmit(v, iteratee)

  return _.isObject(value)
    ? _.isArray(value)
      ? _.map(value, cb)
      : _(value).omitBy(iteratee).mapValues(cb).value()
    : value
}

const main = async () => {
  const inputPath = process.argv[2]
  const input = await safeRead(inputPath)

  if (!input) {
    console.log('Input file not found.')
    console.log('Usage: jtranslate ./source.json fr,uk')
    process.exit(1)
  }

  const inputDir = path.dirname(inputPath)

  const langs = process.argv[3].split(',')
  if (!langs.length) {
    console.log("You should probably provide at least one language, just sayin'")
    process.exit(1)
  }

  for (const lang of langs) {
    await loadCache(lang)

    const leaves = iterLeaves(input, lang)
    const out = await leaves.reduce((acc, leaf) => acc.then(leaf), Promise.resolve(null))

    const outputPath = path.join(inputDir, `./${lang}.json`)
    const existing = await safeRead(outputPath)

    const final = existing
      ? recurseOmit(
          _.mergeWith(out, existing, (oldValue, newValue, key) => {
            if (!oldValue) return null
            return undefined
          }),
          _.isNull,
        )
      : out

    await fs.writeFile(outputPath, JSON.stringify(final, null, 2))
  }

  console.log('[Done]')
  process.exit(0)
}

main()
